/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Trading.HedgeManagement;
import Trading.Position;
import Trading.PositionStatus;
import Trading.PositionType;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;


/**
 *
 * @author david
 */
public class ModifyPositionDialog extends javax.swing.JDialog {

    private boolean ok = false;
    private double actualValue = 0;
    private double orderPrice =0;
    private double orderSL = 0;
    private double orderTP = 0;
    private Position pos = null;
    
    /**
     * Creates new form ModifyPositionDialog
     */
    public ModifyPositionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initValues();
    }
    
    private void initValues(){
        ok = false;  
        //spinners
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(sPrice, "0.0000");
        sPrice.setEditor(editor);
        SpinnerNumberModel model = (SpinnerNumberModel) sPrice.getModel();
        model.setStepSize(0.0001);
        sPrice.setValue(0.0000);
        
        editor = new JSpinner.NumberEditor(sSL, "0.0000");
        sSL.setEditor(editor);
        model = (SpinnerNumberModel) sSL.getModel();
        model.setStepSize(0.0001);
        sSL.setModel(model);
        sSL.setValue(0.0000);
        
        editor = new JSpinner.NumberEditor(sTP, "0.0000");
        sTP.setEditor(editor);
        model = (SpinnerNumberModel) sTP.getModel();
        model.setStepSize(0.0001);
        sTP.setModel(model);
        sTP.setValue(0.0000);
    }
    
     public void setConfig(double actualValue,Position pos){
        this.lActualPrice.setText(String.valueOf(actualValue));
        this.actualValue = actualValue;
        
        this.sPrice.setValue(pos.getOpenPrice());
        this.sSL.setValue(pos.getSl());
        this.sTP.setValue(pos.getTp());
        
        if (pos.getPositionStatus()==PositionStatus.OPENED){
            this.sPrice.setEnabled(false); 
        }else{
            this.sPrice.setEnabled(true);
        }
        
        lType.setText(pos.getPositionStatus().name()+" "+pos.getPositionType().name());
        //creamos nueva posicion
        this.pos = pos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lActualPrice = new javax.swing.JLabel();
        sPrice = new javax.swing.JSpinner();
        sSL = new javax.swing.JSpinner();
        sTP = new javax.swing.JSpinner();
        bOk = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lType = new javax.swing.JLabel();
        bTPActual = new javax.swing.JButton();
        bActualSL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sPrice.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));

        sSL.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));

        sTP.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));

        bOk.setText("OK");
        bOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOkActionPerformed(evt);
            }
        });

        bCancel.setText("CANCEL");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        jLabel1.setText("ACTUAL VALUE:");

        lType.setText("NONE");

        bTPActual.setText("Actual");
        bTPActual.setPreferredSize(new java.awt.Dimension(73, 18));
        bTPActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTPActualActionPerformed(evt);
            }
        });

        bActualSL.setText("Actual");
        bActualSL.setPreferredSize(new java.awt.Dimension(73, 18));
        bActualSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualSLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lActualPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lType, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(sPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sSL, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bActualSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bOk)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sTP, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(bTPActual, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addComponent(bCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lActualPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bTPActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bActualSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCancel)
                    .addComponent(bOk))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_bCancelActionPerformed

    private void bOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOkActionPerformed
        // TODO add your handling code here:
        double price = (double)sPrice.getValue();
        double sl = (double)sSL.getValue();
        double tp = (double)sTP.getValue(); 
       
        if (pos.getPositionType()==PositionType.BUY){
                if (pos.getPositionStatus()==PositionStatus.PENDING){
                    if (HedgeManagement.getPipsDiff(price,actualValue)<=1){
                        JOptionPane.showMessageDialog(this,
                        "Price must be greater than 2 pips",
                        "error",
                        JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (sl>0 && HedgeManagement.getPipsDiff(actualValue,sl)<=1){
                    //lanzar error
                    JOptionPane.showMessageDialog(this,
                    "SL must be at least 2 pips",
                    "error",
                    JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (tp>0 && HedgeManagement.getPipsDiff(tp,actualValue)<=1){
                    //lanzar error
                    JOptionPane.showMessageDialog(this,
                    "TP must be at least 2 pips",
                    "error",
                    JOptionPane.ERROR_MESSAGE);
                    return;                  
                }
         }else if (pos.getPositionType()==PositionType.SELL){
                if (pos.getPositionStatus()==PositionStatus.PENDING){
                    if (HedgeManagement.getPipsDiff(actualValue,price)<=1){
                        JOptionPane.showMessageDialog(this,
                        "Price must be lesser than 2 pips",
                        "error",
                        JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                 if (sl>0 && HedgeManagement.getPipsDiff(sl,actualValue)<=1){
                    //lanzar error
                     JOptionPane.showMessageDialog(this,
                    "SL must be at least 2 pips",
                    "error",
                    JOptionPane.ERROR_MESSAGE);
                    return;                   
                }
                if (tp>0 && HedgeManagement.getPipsDiff(actualValue,tp)<=1){
                    //lanzar error
                    JOptionPane.showMessageDialog(this,
                    "TP must be at least 2 pips",
                    "error",
                    JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        //sólo modificamos la posición si está todo ok
        pos.setOpenPrice(price);
        pos.setSl(sl);
        pos.setTp(tp);
        this.setVisible(false);
    }//GEN-LAST:event_bOkActionPerformed

    private void bTPActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTPActualActionPerformed
        // TODO add your handling code here:
        sTP.setValue(this.actualValue);
    }//GEN-LAST:event_bTPActualActionPerformed

    private void bActualSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualSLActionPerformed
        // TODO add your handling code here:
        sSL.setValue(this.actualValue);
    }//GEN-LAST:event_bActualSLActionPerformed


    public boolean isOk() {
        return ok;
    }

    public void setOk(boolean ok) {
        this.ok = ok;
    }

    public Position getPos() {
        return pos;
    }

    public void setPos(Position pos) {
        this.pos = pos;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualSL;
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bOk;
    private javax.swing.JButton bTPActual;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lActualPrice;
    private javax.swing.JLabel lType;
    private javax.swing.JSpinner sPrice;
    private javax.swing.JSpinner sSL;
    private javax.swing.JSpinner sTP;
    // End of variables declaration//GEN-END:variables
}
