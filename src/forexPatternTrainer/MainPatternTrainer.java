/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package forexPatternTrainer;

import Trading.ConvertLib;
import Trading.DataGranularity;
import Trading.DataProvider;
import Trading.DateUtils;
import Trading.HedgeManagement;
import Trading.NewsItem;
import Trading.PhilDay;
import Trading.Position;
import Trading.PositionType;
import Trading.Quote;
import Trading.TradeType;
import Trading.TradingOperation;
import game.PatternGame;
import gui.ChartPanel;
import gui.DAO;
import gui.GameState;
import gui.TrainingFileDialog;
import indicators.TMA;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import utils.PrintUtils;

/**
 *
 * @author drosa
 */
public class MainPatternTrainer extends javax.swing.JFrame {

    ArrayList<PhilDay> philDays  = null;
    ArrayList<TMA> tmas = null;
    ArrayList<TMA> tmas15 = null;
    ArrayList<Quote> dataSource = null;
    ArrayList<Quote> data5m = null;
    ArrayList<Quote> dataPaint = null;
    ArrayList<Quote> dailyData = null;
    ArrayList<Quote> weeklyData = null;
    ArrayList<Quote> monthlyData = null;    
    ArrayList<String> dataFiles = null;
    ArrayList<NewsItem> news = null;
    ChartPanel chartPanel = null;
    GameState gameState = GameState.STOPPED;
    Timer gameTimer = null;
    MyTask gameTask=null; 
    ArrayList<Position> positions = null;
    
    Quote lastQuote = null;
    TradingOperation actualTradingOperation = new TradingOperation();
    
    PatternGame patternGame = new PatternGame();
    int actualDay = 0;
    int actualDayIndex = 0;
    int absoluteIndex = 0;
    
    /**
     * Creates new form main
     */
    public MainPatternTrainer() {
        initComponents();
        initCustomComponents();
        initGameTimer();
    }
    
     public void initGameTimer(){
         //1- Taking an instance of Timer class.
        gameTimer = new Timer("GameTimer");
        //2- Taking an instance of class contains your repeated method.
        gameTask = new MyTask();        
    }
    
    public void initCustomComponents(){

        chartPanel = new ChartPanel();
        chartPanel.setPreferredSize(new Dimension(50,200));
        chartPanel.setBorder(BorderFactory.createLineBorder (Color.blue, 2));
        chartPanel.setBackground(Color.white);
        getContentPane().add(chartPanel, java.awt.BorderLayout.CENTER);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        bNewGame = new javax.swing.JButton();
        bLoadData = new javax.swing.JButton();
        bNextDay = new javax.swing.JButton();
        bRw = new javax.swing.JButton();
        bFw = new javax.swing.JButton();
        eStep = new javax.swing.JTextField();
        bPause = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        eBalance = new javax.swing.JTextField();
        eTrades = new javax.swing.JTextField();
        eAvgPips = new javax.swing.JTextField();
        bBuy = new javax.swing.JButton();
        bSell = new javax.swing.JButton();
        cbBE = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        eTradeResult = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        eBarInterval = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        eLastOperation = new javax.swing.JTextField();
        bResume = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        eComission = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        eWins = new javax.swing.JTextField();
        eLosses = new javax.swing.JTextField();
        lWinPer = new javax.swing.JLabel();
        cbSL = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        eBestTrack = new javax.swing.JTextField();
        eActualTrack = new javax.swing.JTextField();
        bSaveGameStats = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        cbTP = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        eBEs = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 255));
        getContentPane().setLayout(new java.awt.BorderLayout(0, 10));

        jPanel2.setBackground(new java.awt.Color(102, 102, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 200));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 200));
        jPanel2.setPreferredSize(new java.awt.Dimension(654, 240));

        bNewGame.setText("New game");
        bNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewGameActionPerformed(evt);
            }
        });

        bLoadData.setText("Load data");
        bLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadDataActionPerformed(evt);
            }
        });

        bNextDay.setText("Next day");
        bNextDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextDayActionPerformed(evt);
            }
        });

        bRw.setText("RW");
        bRw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRwActionPerformed(evt);
            }
        });

        bFw.setText("FW");
        bFw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFwActionPerformed(evt);
            }
        });

        eStep.setText("1000");

        bPause.setText("Pause");
        bPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPauseActionPerformed(evt);
            }
        });

        jLabel1.setText("Balance :");
        jLabel1.setPreferredSize(new java.awt.Dimension(50, 14));

        jLabel2.setText("Trades :");
        jLabel2.setPreferredSize(new java.awt.Dimension(50, 14));

        jLabel3.setText("AvgPips:");
        jLabel3.setPreferredSize(new java.awt.Dimension(50, 14));

        eBalance.setText("200");
        eBalance.setPreferredSize(new java.awt.Dimension(75, 20));

        eTrades.setText("0");
        eTrades.setPreferredSize(new java.awt.Dimension(75, 20));

        eAvgPips.setText("0");
        eAvgPips.setPreferredSize(new java.awt.Dimension(75, 20));

        bBuy.setText("BUY");
        bBuy.setPreferredSize(new java.awt.Dimension(60, 23));
        bBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuyActionPerformed(evt);
            }
        });

        bSell.setText("SELL");
        bSell.setPreferredSize(new java.awt.Dimension(60, 23));
        bSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSellActionPerformed(evt);
            }
        });

        cbBE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40" }));
        cbBE.setInheritsPopupMenu(true);

        jLabel4.setText("TP:");

        jLabel6.setText("SL:");

        jLabel7.setText("Trade result :");

        eTradeResult.setText("KILLED at 2012.05.10 18:54:37");

        jButton1.setText("New day");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        eBarInterval.setText("100");
        eBarInterval.setPreferredSize(new java.awt.Dimension(30, 20));

        jLabel8.setText("Last Operation:");

        bResume.setText("Resume");
        bResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResumeActionPerformed(evt);
            }
        });

        jLabel9.setText("Comission:");

        eComission.setText("1.05");

        jLabel10.setText("Wins%");

        jLabel11.setText("Losses%");

        eWins.setText("0");

        eLosses.setText("0");

        lWinPer.setText("100%");

        cbSL.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "110", "120", "130", "140", "150", "160" }));
        cbSL.setInheritsPopupMenu(true);

        jLabel5.setText("BestTrack");
        jLabel5.setPreferredSize(new java.awt.Dimension(43, 14));

        eBestTrack.setText("0");

        eActualTrack.setText("0");

        bSaveGameStats.setText("Save");
        bSaveGameStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveGameStatsActionPerformed(evt);
            }
        });

        jLabel12.setText("BE+1:");

        cbTP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40" }));
        cbTP.setInheritsPopupMenu(true);

        jLabel13.setText("BE");

        eBEs.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eTrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(eAvgPips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(eWins, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lWinPer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(eLosses, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(eBEs)))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eBestTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eActualTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSaveGameStats)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bBuy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bSell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eTradeResult, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                    .addComponent(eLastOperation)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(cbSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eComission, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(cbTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbBE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bLoadData, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bResume)
                        .addGap(5, 5, 5)
                        .addComponent(bNextDay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eBarInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bFw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eStep, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNewGame)
                    .addComponent(bLoadData)
                    .addComponent(bNextDay)
                    .addComponent(bRw)
                    .addComponent(bFw)
                    .addComponent(eStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(bPause)
                    .addComponent(eBarInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bResume))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbBE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(cbTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eTrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(eComission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cbSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eAvgPips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(eWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lWinPer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(eLastOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(eLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(eBEs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(eTradeResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eBestTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eActualTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bSaveGameStats)))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewGameActionPerformed
        // TODO add your handling code here:
        eBalance.setText("200");
        eTrades.setText("0");
        eAvgPips.setText("0");
        eTradeResult.setText("");
        this.eWins.setText("0");
        this.eLosses.setText("0");
        this.eBestTrack.setText("0");
        this.eActualTrack.setText("0");
        
        int tp = Integer.valueOf((String)cbBE.getSelectedItem());
        int sl = Integer.valueOf((String)cbSL.getSelectedItem());
        
        patternGame.initGame(tp, sl);
        if (positions!=null)
            positions.clear();
        else
            positions = new ArrayList<Position>();
    }//GEN-LAST:event_bNewGameActionPerformed

    private ArrayList<String> loadFilesFromPath(String path){
        ArrayList<String> files = new ArrayList<String>();
        
        //load 1 sec files
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();

        for (File file : listOfFiles) {
            //System.out.println("Fichero: "+file.getName());
            String fileDataName = file.getName();
            String fileAbsolutePath= path+"\\"+fileDataName;
            if (file.isFile() && fileDataName.contains("_data")){                            
                //System.out.println(file.getName());
                files.add(fileAbsolutePath);
            }
        }
        
        return files;
    }
    
    private void newDay(boolean first){
        
        this.actualDayIndex = 0;
        if (first){//cargamos de inicio
            ArrayList<String> dataFiles = loadFilesFromPath("c:\\fxdata");

            TrainingFileDialog tfDialog = new TrainingFileDialog(this,true);            
            tfDialog.setTrainingFiles (dataFiles);
            tfDialog.setVisible(true);
            if (tfDialog.isOk()){
                String fileChoosed = tfDialog.getFileChoosed();
                //System.out.println("Training file choosed: "+fileChoosed); 
                File fileData = new File(fileChoosed);

                String linesFileName = fileData.getParent()+"\\"+fileData.getName().substring(0, 14)+"_LINES.csv";
                String tmaFileName   = fileData.getParent()+"\\"+fileData.getName().substring(0, 14)+"_5m_TMA.csv";
                String tma15FileName   = fileData.getParent()+"\\"+fileData.getName().substring(0, 14)+"_15m_TMA.csv";
                System.out.println("Training file choosed tma: "
                            +fileData.getName()
                            +" "+linesFileName
                            +" "+tmaFileName
                            +" "+tma15FileName
                            ); 
                File tmaFile = new File(tmaFileName);
                File tma15File = new File(tma15FileName);
                File linesFile = new File(linesFileName);

                if (!tmaFile.exists()){
                    System.out.println("tmaFile does not exist");
                    return;
                }
                 if (!tma15File.exists()){
                    System.out.println("tmaFile 15min does not exist");
                    return;
                }
                if (!linesFile.exists()){
                    System.out.println("linesFile does not exist");
                    return;
                }
                 if (dataSource!=null)
                        dataSource.clear();
                    else dataSource = new ArrayList<Quote>();
                    if (tmas!=null)
                        tmas.clear();
                    else tmas = new ArrayList<TMA>();
                    if (tmas15!=null)
                        tmas15.clear();
                    else tmas15 = new ArrayList<TMA>();
                    if (philDays!=null)
                        philDays.clear();
                    else philDays = new ArrayList<PhilDay>();

                    //Cargo datos del mes
                    dataSource = DAO.retrieveData(fileData.getAbsolutePath(),DataProvider.DUKASCOPY_FOREX,0);//1s
                    tmas       = TMA.loadFromFile(tmaFileName);//tmas 5m
                    tmas15     = TMA.loadFromFile(tma15FileName);//tmas 15m
                    philDays   = PhilDay.loadFromFile(linesFileName);//phildays
                    this.actualDay = 0; //primer dia del philday
                    this.absoluteIndex = 0;
                    

                    System.out.println("dataSource: "+dataSource.size());
                    System.out.println("tmas 5min: "+tmas.size());
                    System.out.println("tmas 15min: "+tmas15.size());
                    System.out.println("philDays: "+philDays.size());

                    for (int i=0;i<philDays.size();i++){
                        System.out.println(philDays.get(i).toString());
                    }
             }//if dialog
        }else{//siguiente dia
            this.actualDay++;
            
        }
       
        //no hay más días en este mes
        if (actualDay>=philDays.size()){
            return;
        }
        
        if (data5m!=null)
            data5m.clear();
        else
            data5m = new ArrayList<Quote>();
        
        if (dataPaint!=null)
            dataPaint.clear();
        else
            dataPaint = new ArrayList<Quote>();
        
        this.news = DAO.loadNews("c:\\fxdata\\news.txt");
        Calendar actualCal = philDays.get(actualDay).getDay();
        int daySearch = actualCal.get(Calendar.DAY_OF_MONTH);
        Calendar sourceCal = Calendar.getInstance();
        for (int i=0;i<dataSource.size();i++){
            Quote q = dataSource.get(i);
            sourceCal.setTime(q.getDate());
            int daySource = sourceCal.get(Calendar.DAY_OF_MONTH);
            if (daySource==daySearch){
                Quote qNew = new Quote();
                qNew.copy(q);
                dataPaint.add(qNew);
            }                        
        }    
        this.absoluteIndex=actualDay*86400;
        //creamos los datos de 5min necesarios
        data5m   = ConvertLib.convert(dataPaint, 300);
        
        System.out.println("NEW DAY-> dataPaint data5m tma: "
                +dataPaint.size()+" "+data5m.size()+" "+tmas.size());
    }
    
    private void bLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadDataActionPerformed
        //cargamos datos
       gameTask.cancel();
       gameTimer.purge();
       newDay(true);              
       gameTask = new MyTask(); 
       gameTimer.schedule(gameTask, 0, Integer.valueOf(this.eBarInterval.getText()));
       gameState = GameState.STARTED;
    }//GEN-LAST:event_bLoadDataActionPerformed

    private void bFwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFwActionPerformed
        this.actualDayIndex += Integer.valueOf(eStep.getText());
        this.absoluteIndex += Integer.valueOf(eStep.getText());
        renderChart();
    }//GEN-LAST:event_bFwActionPerformed

    private void bRwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRwActionPerformed
        this.actualDayIndex -= Integer.valueOf(eStep.getText());
        this.absoluteIndex  -= Integer.valueOf(eStep.getText());
        renderChart();
    }//GEN-LAST:event_bRwActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       gameTask.cancel();
       gameTimer.purge();
       //nextDay();
       newDay(false);
       gameTask = new MyTask(); 
       gameTimer.schedule(gameTask, 0, Integer.valueOf(this.eBarInterval.getText()));
       gameState = GameState.STARTED;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void updateStats(int intRes){
        double lotSize  = 0.2;
        //this.eMaxPipsAccount.setText("80");
        double pipSize = (Double.valueOf(eBalance.getText())*0.8*1.0)/Integer.valueOf((String)cbSL.getSelectedItem());
        //System.out.println("pipsize "+pipSize);
        
        double lossPips = Integer.valueOf((String)cbSL.getSelectedItem())*1.0+Double.valueOf(this.eComission.getText());
        if (intRes==1){
            double winPips  = Integer.valueOf((String)cbTP.getSelectedItem())*1.0-Double.valueOf(this.eComission.getText());
            eBalance.setText(PrintUtils.Print(Double.valueOf(eBalance.getText())+winPips*pipSize*1.0));
        }else if (intRes==0){
            double winPips  = 1.0-Double.valueOf(this.eComission.getText());
            eBalance.setText(PrintUtils.Print(Double.valueOf(eBalance.getText())+winPips*pipSize*1.0));
        }else{
            eBalance.setText(PrintUtils.Print(Double.valueOf(eBalance.getText())-lossPips*pipSize*1.0));
        }
        eTrades.setText(String.valueOf(Integer.valueOf(eTrades.getText())+1));
    }
    
    private int testTradingOperation(){
        System.out.println("absoluteIndex position: "+this.actualTradingOperation.getIndex());
        int index = this.actualTradingOperation.getIndex();
        int finalIndex = -1;
        String res="";
        int intRes = -2;
        Date d = null;
        boolean movedToBE = false;
        //hora de apertura
        Quote q0= dataSource.get(this.actualTradingOperation.getIndex());
        this.actualTradingOperation.getCal().setTimeInMillis(q0.getDate().getTime());
        
        Calendar cal = Calendar.getInstance();
        for (int i=index;i<this.dataSource.size();i++){
            Quote q= dataSource.get(i);
            cal.setTime(q.getDate());
            int beDiff = HedgeManagement.getPipsDiff(q.getClose(),this.actualTradingOperation.getBE());
            int tpDiff = HedgeManagement.getPipsDiff(q.getClose(),this.actualTradingOperation.getTP());
            int slDiff = HedgeManagement.getPipsDiff(q.getClose(),this.actualTradingOperation.getSL());
            
            if (this.actualTradingOperation.getTradeType()==TradeType.BUY){
                if (beDiff>=0){//move to BE
                    movedToBE = true;
                    //movemos SL a BE+1
                    this.actualTradingOperation.setSL(this.actualTradingOperation.getEntryValue()+0.0001);
                    System.out.println("BUY sl moved to BE: "+PrintUtils.Print4(this.actualTradingOperation.getSL()));
                }
                if (slDiff<=0){
                    if (movedToBE)
                        intRes = 0;
                    else intRes = -1;
                    d=q.getDate();
                    finalIndex = i;
                    break;
                }else if (tpDiff>=0){
                    intRes = 1;   
                    d=q.getDate();
                    finalIndex = i;
                    break;
                }
            }else{ //SELL
                if (beDiff<=0){//move to BE
                    movedToBE = true;
                    //movemos SL a BE+1
                    this.actualTradingOperation.setSL(this.actualTradingOperation.getEntryValue()-0.0001);
                    System.out.println("SELL sl moved to BE: "+PrintUtils.Print4(this.actualTradingOperation.getSL()));
                }
                if (slDiff>=0){
                    if (movedToBE)
                        intRes = 0;
                    else intRes = -1;
                    d=q.getDate();
                    finalIndex = i;
                    break;
                }else if (tpDiff<=0){
                    intRes = 1; 
                    d=q.getDate();
                    finalIndex = i;
                    break;
                }
            }
        }
        
        int totalWins   = Integer.valueOf(eWins.getText());
        int totalLosses = Integer.valueOf(eLosses.getText());
        int totalBEs    = Integer.valueOf(eBEs.getText());
        Position pos = new Position();
        pos.setPositionType(PositionType.valueOf(this.actualTradingOperation.getTradeType().name()));
        pos.getDate().setTimeInMillis(this.actualTradingOperation.getCal().getTimeInMillis());
        pos.setOpenPrice(this.actualTradingOperation.getEntryValue());
        pos.getCloseDate().setTimeInMillis(cal.getTimeInMillis());
        pos.setTp(this.actualTradingOperation.getTP());
        pos.setSl(this.actualTradingOperation.getSL());
        
        if (intRes==1){
            res = "WIN! AT "+PrintUtils.Print(this.actualTradingOperation.getTP())
                    +" "+DateUtils.datePrint(d); 
            updateStats(intRes);
            totalWins   ++;
            pos.setWin(true);
            
        }else if (intRes==-1){
            res = "LOSS! AT "+PrintUtils.Print(this.actualTradingOperation.getSL())
                    +" "+DateUtils.datePrint(d);
           
            JOptionPane.showMessageDialog(this,
                    "TRading Fail.Game OVER. LastBalance Trades: "
                    +eBalance.getText()
                    +" "+eTrades.getText()
                    ,"error",
                    JOptionPane.ERROR_MESSAGE);
             updateStats(intRes);
             totalLosses++;
              pos.setWin(false);
        }else if (intRes==0){
            res = "BE! AT "+PrintUtils.Print(this.actualTradingOperation.getSL())
                    +" "+DateUtils.datePrint(d);
 
             updateStats(intRes);
             totalBEs++;
             pos.setWin(true);
        }
        //actualizamos el juego
        patternGame.updateStats(intRes);
        //añadimos a posiciones
        positions.add(pos);
        
        int total = totalWins+totalLosses+totalBEs;
        double winPer = totalWins*100.0/(total);
        double lossPer = totalLosses*100.0/(total);
        double bePer = totalBEs*100.0/(total);
        eWins.setText(String.valueOf(totalWins));
        eLosses.setText(String.valueOf(totalLosses));
        eBEs.setText(String.valueOf(totalBEs));
        lWinPer.setText(String.valueOf(PrintUtils.Print(winPer))+"%)");
        eTradeResult.setText(res);
        eBestTrack.setText(String.valueOf(this.patternGame.getBestTrack()));
        eActualTrack.setText(String.valueOf(this.patternGame.getActualTrack()));
        return finalIndex;
    }
    
    private void bBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuyActionPerformed
        // TODO add your handling code here:
         bPauseActionPerformed(null);
         int tp = Integer.valueOf((String)cbTP.getSelectedItem());
         int sl = Integer.valueOf((String)cbSL.getSelectedItem());
         int be = Integer.valueOf((String)cbBE.getSelectedItem());
         double tpValue = this.lastQuote.getClose()+tp*0.0001;
         double slValue = this.lastQuote.getClose()-sl*0.0001;
         double beValue = this.lastQuote.getClose()+be*0.0001;
         
         actualTradingOperation.getCal().setTimeInMillis(this.lastQuote.getDate().getTime());
         actualTradingOperation.setIndex(this.absoluteIndex);
         actualTradingOperation.setEntryValue(this.lastQuote.getClose());
         actualTradingOperation.setTradeType(TradeType.BUY);
         actualTradingOperation.setTP(tpValue);
         actualTradingOperation.setSL(slValue);
         actualTradingOperation.setBE(beValue);
         
         eLastOperation.setText("BUY AT "+PrintUtils.Print(this.lastQuote.getClose())
                 +" SL: "+PrintUtils.Print(slValue) 
                 +" TP: "+PrintUtils.Print(tpValue)
                 );
         
         int index = testTradingOperation();
         moveToIndex(index);
         
    }//GEN-LAST:event_bBuyActionPerformed

    private void bPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPauseActionPerformed
        // TODO add your handling code here:
        if (gameState==GameState.STARTED){
            gameTask.cancel();
            gameTimer.purge(); 
            gameState = GameState.PAUSED;
        }
    }//GEN-LAST:event_bPauseActionPerformed

    private void bResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResumeActionPerformed
        // TODO add your handling code here:
        if (gameState == GameState.PAUSED){
            if (gameState!=null){
                gameTask.cancel();
                gameTimer.purge(); 
            }
            if (gameTimer!=null){
                
            }
            gameTask = new MyTask(); 
            gameTimer = new Timer("GameTimer");
            gameTimer.schedule(gameTask, 0, Integer.valueOf(this.eBarInterval.getText()));
            gameState = GameState.STARTED;
        }
    }//GEN-LAST:event_bResumeActionPerformed
    
    private void bSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSellActionPerformed
        // TODO add your handling code here:
                 bPauseActionPerformed(null);
         int tp = Integer.valueOf((String)cbTP.getSelectedItem());
         int sl = Integer.valueOf((String)cbSL.getSelectedItem());
         int be = Integer.valueOf((String)cbBE.getSelectedItem());
         double tpValue = this.lastQuote.getClose()-tp*0.0001;
         double slValue = this.lastQuote.getClose()+sl*0.0001;
         double beValue = this.lastQuote.getClose()-be*0.0001;
         
         actualTradingOperation.setIndex(this.absoluteIndex);
         actualTradingOperation.setEntryValue(this.lastQuote.getClose());
         actualTradingOperation.setTradeType(TradeType.SELL);
         actualTradingOperation.setTP(tpValue);
         actualTradingOperation.setSL(slValue);
         actualTradingOperation.setBE(beValue);
         
         eLastOperation.setText("SELL AT "+PrintUtils.Print(this.lastQuote.getClose())
                 +" SL: "+PrintUtils.Print(slValue) 
                 +" TP: "+PrintUtils.Print(tpValue)
                 );
         
         int index = testTradingOperation();
         moveToIndex(index);
    }//GEN-LAST:event_bSellActionPerformed

    private void moveToIndex(int index){
        System.out.println("move to index: "+index);
        int totalDays = dataSource.size()/(3600*24);
        int day = index / (3600*24);
        int offset = index-day*(3600*24);
        
        this.actualDay = day;
        this.actualDayIndex = offset;
        this.absoluteIndex=index;
        
        if (data5m!=null)
            data5m.clear();
        else
            data5m = new ArrayList<Quote>();
        
        if (dataPaint!=null)
            dataPaint.clear();
        else
            dataPaint = new ArrayList<Quote>();
        
        Calendar actualCal = philDays.get(day).getDay();
        int daySearch = actualCal.get(Calendar.DAY_OF_MONTH);
        Calendar sourceCal = Calendar.getInstance();
        for (int i=0;i<dataSource.size();i++){
            Quote q = dataSource.get(i);
            sourceCal.setTime(q.getDate());
            int daySource = sourceCal.get(Calendar.DAY_OF_MONTH);
            if (daySource==daySearch){
                Quote qNew = new Quote();
                qNew.copy(q);
                dataPaint.add(qNew);
            }                        
        }        
        //creamos los datos de 5min necesarios
        data5m   = ConvertLib.convert(dataPaint, 300);
        
        System.out.println("NEW DAY-> dataPaint data5m tma: "
                +dataPaint.size()+" "+data5m.size()+" "+tmas.size());
       
        bResumeActionPerformed(null);
    }
    
    private void bNextDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextDayActionPerformed
        // TODO add your handling code here:
       gameTask.cancel();
       gameTimer.purge();
       //nextDay();
       newDay(false);
       gameTask = new MyTask(); 
       gameTimer.schedule(gameTask, 0, Integer.valueOf(this.eBarInterval.getText()));
       gameState = GameState.STARTED;
    }//GEN-LAST:event_bNextDayActionPerformed

    private void bSaveGameStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveGameStatsActionPerformed
        // TODO add your handling code here:
        int tp = Integer.valueOf((String)cbTP.getSelectedItem());
        int sl = Integer.valueOf((String)cbSL.getSelectedItem());
        int be = Integer.valueOf((String)cbBE.getSelectedItem());
        this.patternGame.setTP(tp);
        this.patternGame.setSL(sl);
        this.patternGame.setBE(be);
        this.patternGame.setTotalTrades(Integer.valueOf(this.eTrades.getText()));
        this.patternGame.setTotalWins(Integer.valueOf(this.eWins.getText()));
        this.patternGame.setTotalBes(Integer.valueOf(this.eBEs.getText()));
        this.patternGame.setBestTrack(Integer.valueOf(this.eBestTrack.getText()));
        this.patternGame.saveGame(DateUtils.generateFileName(this.patternGame.getGameDateTime(),".csv")
            ,positions,true);
    }//GEN-LAST:event_bSaveGameStatsActionPerformed

    public void renderChart(){
        //System.out.println("[renderChart] Entrado");
        if (chartPanel!=null){
            //como segundo siempre paso el data5m
            chartPanel.setData(dataPaint,data5m,philDays,null,tmas,tmas15,true,DataGranularity.MIN5,8);
            chartPanel.setSliderFactor(this.actualDayIndex);
            //System.out.println("slider value : "+actualDayIndex);
            chartPanel.repaint();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPatternTrainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPatternTrainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPatternTrainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPatternTrainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       MainPatternTrainer mainFrame = new MainPatternTrainer();
       mainFrame.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuy;
    private javax.swing.JButton bFw;
    private javax.swing.JButton bLoadData;
    private javax.swing.JButton bNewGame;
    private javax.swing.JButton bNextDay;
    private javax.swing.JButton bPause;
    private javax.swing.JButton bResume;
    private javax.swing.JButton bRw;
    private javax.swing.JButton bSaveGameStats;
    private javax.swing.JButton bSell;
    private javax.swing.JComboBox cbBE;
    private javax.swing.JComboBox cbSL;
    private javax.swing.JComboBox cbTP;
    private javax.swing.JTextField eActualTrack;
    private javax.swing.JTextField eAvgPips;
    private javax.swing.JTextField eBEs;
    private javax.swing.JTextField eBalance;
    private javax.swing.JTextField eBarInterval;
    private javax.swing.JTextField eBestTrack;
    private javax.swing.JTextField eComission;
    private javax.swing.JTextField eLastOperation;
    private javax.swing.JTextField eLosses;
    private javax.swing.JTextField eStep;
    private javax.swing.JTextField eTradeResult;
    private javax.swing.JTextField eTrades;
    private javax.swing.JTextField eWins;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lWinPer;
    // End of variables declaration//GEN-END:variables

    class MyTask extends TimerTask {
        
        public void run() {
            //System.out.println("Actual Index : "+actualDayIndex);
            //compruebo si es nuevo dia
            if (actualDayIndex>=dataPaint.size()-1){
                newDay(false);
                return;
            }   
            //renderizo el chart
            renderChart();
        
            if (actualDayIndex<0) return;
            lastQuote = dataPaint.get(actualDayIndex);
            Quote actualQuote = dataPaint.get(actualDayIndex);
            double actualValue = dataPaint.get(actualDayIndex).getClose();
            
            actualDayIndex++;
            absoluteIndex++;
        }
    }
}
